generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// admin Table
model Admin {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  phoneNumber String @unique
  otp Int @default(111111)
  verified Boolean @default(false)
  permission String @default("User")
  created_at DateTime @default(now())
  active Boolean @default(true)
}

// Super Admin Table
model SuperAdmin{
  id Int @id @default(autoincrement())
  email String @unique
  name String
  password String
  created_at DateTime @default(now())
  otp Int @default(1111)

}

// Users Table
model Users{
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  address String
  phoneNumber String @unique
  verified Boolean @default(false)
  otp Int @default(111111)
  active Boolean @default(true)
  usersproducts UsersProducts[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  payment Payments[] 
}

// payments Table
model Payments{
  id Int @id @default(autoincrement())
  token String
  numberCard String?
  userId String 
  user Users @relation(fields: [userId],references: [id])
  created_at DateTime @default(now())
  payment_status String

}

model Category{
  id Int @id @default(autoincrement())
  name String @unique
  description String
  imgUrl String @default("")
  active Boolean @default(true)
  subCategory SubCategory[]

}

model SubCategory{
  id Int @id @default(autoincrement())
  name String @unique
  description String
  imgUrl String @default("")
  categoryId Int
  category Category @relation(fields:[categoryId], references:[id])
  active Boolean @default(true)
  products Products[]

}

model Products{
  id Int @id @default(autoincrement())
  title String
  description String
  price Decimal @db.Decimal(9,2)
  discount Int @default(0)
  created_at DateTime @default(now())
  images Images[]
  constructorId Int
  constructor ConstructorUser @relation( fields:[constructorId], references: [id])
  usersProducts UsersProducts[]
  subCategoryId Int
  subCategory SubCategory @relation( fields:[subCategoryId], references: [id])
  active Boolean @default(true)

}
model Images{
  id Int @id @default(autoincrement())
  imageUrl String
  productId Int
  product Products @relation( fields:[productId], references: [id])
  
}

model ConstructorUser{
  id Int @id @default(autoincrement())
  name String
  profileImg String
  email String @unique
  password String
  address String
  phoneNumber String
  products Products[]
  otp Int @default(111111)
  active Boolean @default(true)
  verified Boolean @default(false)
  services Services[]
  socialMedia Social[]
}

model Social{
  id Int @id @default(autoincrement())
  title String
  links String
  active Boolean @default(true)
  constructorId Int
  constructor ConstructorUser @relation( fields:[constructorId], references: [id])

}

model Services{
  id Int @id @default(autoincrement())
  title String
  description String
  projectLink String
  imageUrl String
  constructorId Int 
  constructor ConstructorUser @relation( fields:[constructorId], references: [id])
  created_at DateTime @default(now())
  
}

model UsersProducts{
  id Int @id @default(autoincrement())
  productId Int
  product Products @relation( fields:[productId], references: [id])
  usersId String 
  users Users @relation( fields:[usersId], references: [id])
  totalAmount Int
  created_at DateTime @default(now())

}